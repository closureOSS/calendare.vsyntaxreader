namespace VSyntaxReader.Tests.Recurrence;

public static partial class RecurrenceTestLibrary
{
    public static TheoryData<RRuleUsecase> HourlyTestdata() => new()
    {
// { new RRuleUsecase("20241001T143000", "FREQ=HOURLY;INTERVAL=3;UNTIL=20241101T000000;BYDAY=MO,TU,WE,TH,FR", "Europe/Zurich", new(-1, []))},
{ new RRuleUsecase("20241001T030500", "FREQ=HOURLY;INTERVAL=6;UNTIL=20241031T000000;BYDAY=SU,SA;BYHOUR=9,15", "Europe/Zurich", new(14, [
"2024-10-05T09:05:00 Europe/Zurich (+02)",
"2024-10-05T15:05:00 Europe/Zurich (+02)",
"2024-10-06T09:05:00 Europe/Zurich (+02)",
"2024-10-06T15:05:00 Europe/Zurich (+02)",
"2024-10-12T09:05:00 Europe/Zurich (+02)",
"2024-10-12T15:05:00 Europe/Zurich (+02)",
"2024-10-13T09:05:00 Europe/Zurich (+02)",
"2024-10-13T15:05:00 Europe/Zurich (+02)",
"2024-10-19T09:05:00 Europe/Zurich (+02)",
"2024-10-19T15:05:00 Europe/Zurich (+02)",
"2024-10-20T09:05:00 Europe/Zurich (+02)",
"2024-10-20T15:05:00 Europe/Zurich (+02)",
"2024-10-26T09:05:00 Europe/Zurich (+02)",
"2024-10-26T15:05:00 Europe/Zurich (+02)",
]))},
{ new RRuleUsecase("20241001T143000", "FREQ=HOURLY;INTERVAL=9;UNTIL=20241201T000000;BYDAY=TU,WE,SA;BYYEARDAY=325,330,331,332,333,-32,-33", "Europe/Zurich", new(12, [
"2024-11-20T01:30:00 Europe/Zurich (+01)",
"2024-11-20T10:30:00 Europe/Zurich (+01)",
"2024-11-20T19:30:00 Europe/Zurich (+01)",
"2024-11-26T01:30:00 Europe/Zurich (+01)",
"2024-11-26T10:30:00 Europe/Zurich (+01)",
"2024-11-26T19:30:00 Europe/Zurich (+01)",
"2024-11-27T04:30:00 Europe/Zurich (+01)",
"2024-11-27T13:30:00 Europe/Zurich (+01)",
"2024-11-27T22:30:00 Europe/Zurich (+01)",
"2024-11-30T04:30:00 Europe/Zurich (+01)",
"2024-11-30T13:30:00 Europe/Zurich (+01)",
"2024-11-30T22:30:00 Europe/Zurich (+01)",
]))},
{ new RRuleUsecase("20241001T123000Z", "FREQ=HOURLY;INTERVAL=9;UNTIL=20241201T000000;BYDAY=TU,WE,SA;BYYEARDAY=325,330,331,332,333,-32,-33", null, new(12, [
"2024-11-20T00:30:00 UTC (+00)",
"2024-11-20T09:30:00 UTC (+00)",
"2024-11-20T18:30:00 UTC (+00)",
"2024-11-26T00:30:00 UTC (+00)",
"2024-11-26T09:30:00 UTC (+00)",
"2024-11-26T18:30:00 UTC (+00)",
"2024-11-27T03:30:00 UTC (+00)",
"2024-11-27T12:30:00 UTC (+00)",
"2024-11-27T21:30:00 UTC (+00)",
"2024-11-30T03:30:00 UTC (+00)",
"2024-11-30T12:30:00 UTC (+00)",
"2024-11-30T21:30:00 UTC (+00)",
]))},
{ new RRuleUsecase("20241231T103045Z", "FREQ=HOURLY;INTERVAL=3;COUNT=12", null, new(12, [
"2024-12-31T10:30:45 UTC (+00)",
"2024-12-31T13:30:45 UTC (+00)",
"2024-12-31T16:30:45 UTC (+00)",
"2024-12-31T19:30:45 UTC (+00)",
"2024-12-31T22:30:45 UTC (+00)",
"2025-01-01T01:30:45 UTC (+00)",
"2025-01-01T04:30:45 UTC (+00)",
"2025-01-01T07:30:45 UTC (+00)",
"2025-01-01T10:30:45 UTC (+00)",
"2025-01-01T13:30:45 UTC (+00)",
"2025-01-01T16:30:45 UTC (+00)",
"2025-01-01T19:30:45 UTC (+00)",
]))},
{ new RRuleUsecase("20241231T103045Z", "FREQ=HOURLY;INTERVAL=3;BYMINUTE=0,15,30,45;COUNT=10", null, new(10, [
"2024-12-31T10:30:45 UTC (+00)",
"2024-12-31T10:45:45 UTC (+00)",
"2024-12-31T13:00:45 UTC (+00)",
"2024-12-31T13:15:45 UTC (+00)",
"2024-12-31T13:30:45 UTC (+00)",
"2024-12-31T13:45:45 UTC (+00)",
"2024-12-31T16:00:45 UTC (+00)",
"2024-12-31T16:15:45 UTC (+00)",
"2024-12-31T16:30:45 UTC (+00)",
"2024-12-31T16:45:45 UTC (+00)",
]))},
    };

}
